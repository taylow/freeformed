// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
    id,
    first_name,
    last_name,
    email,
    enabled
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, first_name, last_name, email, enabled, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	ID        uuid.UUID `db:"id" json:"id"`
	FirstName string    `db:"first_name" json:"first_name"`
	LastName  string    `db:"last_name" json:"last_name"`
	Email     string    `db:"email" json:"email"`
	Enabled   bool      `db:"enabled" json:"enabled"`
}

// CreateUser creates a new User entry
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Enabled,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM "user"
WHERE id = $1
RETURNING id, first_name, last_name, email, enabled, created_at, updated_at, deleted_at
`

// DeleteUser deletes a User
func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.deleteUserStmt, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const disableUser = `-- name: DisableUser :exec
UPDATE "user"
SET enabled = false,
  updated_at = now()
WHERE id = $1
`

// DisableUser sets the enabled field to false
func (q *Queries) DisableUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.disableUserStmt, disableUser, id)
	return err
}

const enableUser = `-- name: EnableUser :exec
UPDATE "user"
SET enabled = true,
  updated_at = now()
WHERE id = $1
`

// EnableUser sets the enabled field to true
func (q *Queries) EnableUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.enableUserStmt, enableUser, id)
	return err
}

const readUser = `-- name: ReadUser :one
SELECT id, first_name, last_name, email, enabled, created_at, updated_at, deleted_at
FROM "user"
WHERE id = $1
LIMIT 1
`

// ReadUser fetches a single User by ID
func (q *Queries) ReadUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.readUserStmt, readUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE "user"
SET deleted_at = now(),
  updated_at = now()
WHERE id = $1
`

// SoftDeleteUser sets the deleted_at timestamp to now(), indicating that the User is deleted
func (q *Queries) SoftDeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.softDeleteUserStmt, softDeleteUser, id)
	return err
}

const unsoftDeleteUser = `-- name: UnsoftDeleteUser :exec
UPDATE "user"
SET soft_deleted_at = NULL,
  updated_at = now()
WHERE id = $1
`

// UnsoftDeleteUser sets the deleted_at timestamp to NULL, indicating that the User is not deleted
func (q *Queries) UnsoftDeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.unsoftDeleteUserStmt, unsoftDeleteUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET first_name = $2,
  last_name = $3,
  email = $4,
  updated_at = now()
WHERE id = $1
RETURNING id, first_name, last_name, email, enabled, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID        uuid.UUID `db:"id" json:"id"`
	FirstName string    `db:"first_name" json:"first_name"`
	LastName  string    `db:"last_name" json:"last_name"`
	Email     string    `db:"email" json:"email"`
}

// UpdateUser updates the details of a User
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
