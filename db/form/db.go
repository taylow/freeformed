// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package postgres

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkFormExistsStmt, err = db.PrepareContext(ctx, checkFormExists); err != nil {
		return nil, fmt.Errorf("error preparing query CheckFormExists: %w", err)
	}
	if q.createFormStmt, err = db.PrepareContext(ctx, createForm); err != nil {
		return nil, fmt.Errorf("error preparing query CreateForm: %w", err)
	}
	if q.createFormDataStmt, err = db.PrepareContext(ctx, createFormData); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFormData: %w", err)
	}
	if q.deleteFormStmt, err = db.PrepareContext(ctx, deleteForm); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteForm: %w", err)
	}
	if q.deleteFormDataStmt, err = db.PrepareContext(ctx, deleteFormData); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFormData: %w", err)
	}
	if q.disableFileUploadsStmt, err = db.PrepareContext(ctx, disableFileUploads); err != nil {
		return nil, fmt.Errorf("error preparing query DisableFileUploads: %w", err)
	}
	if q.disableFormStmt, err = db.PrepareContext(ctx, disableForm); err != nil {
		return nil, fmt.Errorf("error preparing query DisableForm: %w", err)
	}
	if q.enableFileUploadsStmt, err = db.PrepareContext(ctx, enableFileUploads); err != nil {
		return nil, fmt.Errorf("error preparing query EnableFileUploads: %w", err)
	}
	if q.enableFormStmt, err = db.PrepareContext(ctx, enableForm); err != nil {
		return nil, fmt.Errorf("error preparing query EnableForm: %w", err)
	}
	if q.formStmt, err = db.PrepareContext(ctx, form); err != nil {
		return nil, fmt.Errorf("error preparing query Form: %w", err)
	}
	if q.listFormDataByFormIDStmt, err = db.PrepareContext(ctx, listFormDataByFormID); err != nil {
		return nil, fmt.Errorf("error preparing query ListFormDataByFormID: %w", err)
	}
	if q.listFormsStmt, err = db.PrepareContext(ctx, listForms); err != nil {
		return nil, fmt.Errorf("error preparing query ListForms: %w", err)
	}
	if q.listFormsByProjectStmt, err = db.PrepareContext(ctx, listFormsByProject); err != nil {
		return nil, fmt.Errorf("error preparing query ListFormsByProject: %w", err)
	}
	if q.readFormDataStmt, err = db.PrepareContext(ctx, readFormData); err != nil {
		return nil, fmt.Errorf("error preparing query ReadFormData: %w", err)
	}
	if q.setFormColorStmt, err = db.PrepareContext(ctx, setFormColor); err != nil {
		return nil, fmt.Errorf("error preparing query SetFormColor: %w", err)
	}
	if q.setFormDescriptionStmt, err = db.PrepareContext(ctx, setFormDescription); err != nil {
		return nil, fmt.Errorf("error preparing query SetFormDescription: %w", err)
	}
	if q.setFormNameStmt, err = db.PrepareContext(ctx, setFormName); err != nil {
		return nil, fmt.Errorf("error preparing query SetFormName: %w", err)
	}
	if q.setFormRedirectUrlStmt, err = db.PrepareContext(ctx, setFormRedirectUrl); err != nil {
		return nil, fmt.Errorf("error preparing query SetFormRedirectUrl: %w", err)
	}
	if q.softDeleteFormStmt, err = db.PrepareContext(ctx, softDeleteForm); err != nil {
		return nil, fmt.Errorf("error preparing query SoftDeleteForm: %w", err)
	}
	if q.unsoftDeleteFormStmt, err = db.PrepareContext(ctx, unsoftDeleteForm); err != nil {
		return nil, fmt.Errorf("error preparing query UnsoftDeleteForm: %w", err)
	}
	if q.updateFormStmt, err = db.PrepareContext(ctx, updateForm); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateForm: %w", err)
	}
	if q.updateStatusStmt, err = db.PrepareContext(ctx, updateStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStatus: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkFormExistsStmt != nil {
		if cerr := q.checkFormExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkFormExistsStmt: %w", cerr)
		}
	}
	if q.createFormStmt != nil {
		if cerr := q.createFormStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFormStmt: %w", cerr)
		}
	}
	if q.createFormDataStmt != nil {
		if cerr := q.createFormDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFormDataStmt: %w", cerr)
		}
	}
	if q.deleteFormStmt != nil {
		if cerr := q.deleteFormStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFormStmt: %w", cerr)
		}
	}
	if q.deleteFormDataStmt != nil {
		if cerr := q.deleteFormDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFormDataStmt: %w", cerr)
		}
	}
	if q.disableFileUploadsStmt != nil {
		if cerr := q.disableFileUploadsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing disableFileUploadsStmt: %w", cerr)
		}
	}
	if q.disableFormStmt != nil {
		if cerr := q.disableFormStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing disableFormStmt: %w", cerr)
		}
	}
	if q.enableFileUploadsStmt != nil {
		if cerr := q.enableFileUploadsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing enableFileUploadsStmt: %w", cerr)
		}
	}
	if q.enableFormStmt != nil {
		if cerr := q.enableFormStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing enableFormStmt: %w", cerr)
		}
	}
	if q.formStmt != nil {
		if cerr := q.formStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing formStmt: %w", cerr)
		}
	}
	if q.listFormDataByFormIDStmt != nil {
		if cerr := q.listFormDataByFormIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFormDataByFormIDStmt: %w", cerr)
		}
	}
	if q.listFormsStmt != nil {
		if cerr := q.listFormsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFormsStmt: %w", cerr)
		}
	}
	if q.listFormsByProjectStmt != nil {
		if cerr := q.listFormsByProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFormsByProjectStmt: %w", cerr)
		}
	}
	if q.readFormDataStmt != nil {
		if cerr := q.readFormDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readFormDataStmt: %w", cerr)
		}
	}
	if q.setFormColorStmt != nil {
		if cerr := q.setFormColorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setFormColorStmt: %w", cerr)
		}
	}
	if q.setFormDescriptionStmt != nil {
		if cerr := q.setFormDescriptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setFormDescriptionStmt: %w", cerr)
		}
	}
	if q.setFormNameStmt != nil {
		if cerr := q.setFormNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setFormNameStmt: %w", cerr)
		}
	}
	if q.setFormRedirectUrlStmt != nil {
		if cerr := q.setFormRedirectUrlStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setFormRedirectUrlStmt: %w", cerr)
		}
	}
	if q.softDeleteFormStmt != nil {
		if cerr := q.softDeleteFormStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing softDeleteFormStmt: %w", cerr)
		}
	}
	if q.unsoftDeleteFormStmt != nil {
		if cerr := q.unsoftDeleteFormStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unsoftDeleteFormStmt: %w", cerr)
		}
	}
	if q.updateFormStmt != nil {
		if cerr := q.updateFormStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFormStmt: %w", cerr)
		}
	}
	if q.updateStatusStmt != nil {
		if cerr := q.updateStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStatusStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	checkFormExistsStmt      *sql.Stmt
	createFormStmt           *sql.Stmt
	createFormDataStmt       *sql.Stmt
	deleteFormStmt           *sql.Stmt
	deleteFormDataStmt       *sql.Stmt
	disableFileUploadsStmt   *sql.Stmt
	disableFormStmt          *sql.Stmt
	enableFileUploadsStmt    *sql.Stmt
	enableFormStmt           *sql.Stmt
	formStmt                 *sql.Stmt
	listFormDataByFormIDStmt *sql.Stmt
	listFormsStmt            *sql.Stmt
	listFormsByProjectStmt   *sql.Stmt
	readFormDataStmt         *sql.Stmt
	setFormColorStmt         *sql.Stmt
	setFormDescriptionStmt   *sql.Stmt
	setFormNameStmt          *sql.Stmt
	setFormRedirectUrlStmt   *sql.Stmt
	softDeleteFormStmt       *sql.Stmt
	unsoftDeleteFormStmt     *sql.Stmt
	updateFormStmt           *sql.Stmt
	updateStatusStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		checkFormExistsStmt:      q.checkFormExistsStmt,
		createFormStmt:           q.createFormStmt,
		createFormDataStmt:       q.createFormDataStmt,
		deleteFormStmt:           q.deleteFormStmt,
		deleteFormDataStmt:       q.deleteFormDataStmt,
		disableFileUploadsStmt:   q.disableFileUploadsStmt,
		disableFormStmt:          q.disableFormStmt,
		enableFileUploadsStmt:    q.enableFileUploadsStmt,
		enableFormStmt:           q.enableFormStmt,
		formStmt:                 q.formStmt,
		listFormDataByFormIDStmt: q.listFormDataByFormIDStmt,
		listFormsStmt:            q.listFormsStmt,
		listFormsByProjectStmt:   q.listFormsByProjectStmt,
		readFormDataStmt:         q.readFormDataStmt,
		setFormColorStmt:         q.setFormColorStmt,
		setFormDescriptionStmt:   q.setFormDescriptionStmt,
		setFormNameStmt:          q.setFormNameStmt,
		setFormRedirectUrlStmt:   q.setFormRedirectUrlStmt,
		softDeleteFormStmt:       q.softDeleteFormStmt,
		unsoftDeleteFormStmt:     q.unsoftDeleteFormStmt,
		updateFormStmt:           q.updateFormStmt,
		updateStatusStmt:         q.updateStatusStmt,
	}
}
