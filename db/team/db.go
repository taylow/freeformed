// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package postgres

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.changeTeamOwnerStmt, err = db.PrepareContext(ctx, changeTeamOwner); err != nil {
		return nil, fmt.Errorf("error preparing query ChangeTeamOwner: %w", err)
	}
	if q.createTeamStmt, err = db.PrepareContext(ctx, createTeam); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTeam: %w", err)
	}
	if q.deleteTeamStmt, err = db.PrepareContext(ctx, deleteTeam); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTeam: %w", err)
	}
	if q.disableTeamStmt, err = db.PrepareContext(ctx, disableTeam); err != nil {
		return nil, fmt.Errorf("error preparing query DisableTeam: %w", err)
	}
	if q.enableTeamStmt, err = db.PrepareContext(ctx, enableTeam); err != nil {
		return nil, fmt.Errorf("error preparing query EnableTeam: %w", err)
	}
	if q.listTeamsStmt, err = db.PrepareContext(ctx, listTeams); err != nil {
		return nil, fmt.Errorf("error preparing query ListTeams: %w", err)
	}
	if q.readTeamStmt, err = db.PrepareContext(ctx, readTeam); err != nil {
		return nil, fmt.Errorf("error preparing query ReadTeam: %w", err)
	}
	if q.readTeamByOwnerStmt, err = db.PrepareContext(ctx, readTeamByOwner); err != nil {
		return nil, fmt.Errorf("error preparing query ReadTeamByOwner: %w", err)
	}
	if q.softDeleteTeamStmt, err = db.PrepareContext(ctx, softDeleteTeam); err != nil {
		return nil, fmt.Errorf("error preparing query SoftDeleteTeam: %w", err)
	}
	if q.unsoftDeleteTeamStmt, err = db.PrepareContext(ctx, unsoftDeleteTeam); err != nil {
		return nil, fmt.Errorf("error preparing query UnsoftDeleteTeam: %w", err)
	}
	if q.updateTeamStmt, err = db.PrepareContext(ctx, updateTeam); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTeam: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.changeTeamOwnerStmt != nil {
		if cerr := q.changeTeamOwnerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing changeTeamOwnerStmt: %w", cerr)
		}
	}
	if q.createTeamStmt != nil {
		if cerr := q.createTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTeamStmt: %w", cerr)
		}
	}
	if q.deleteTeamStmt != nil {
		if cerr := q.deleteTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTeamStmt: %w", cerr)
		}
	}
	if q.disableTeamStmt != nil {
		if cerr := q.disableTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing disableTeamStmt: %w", cerr)
		}
	}
	if q.enableTeamStmt != nil {
		if cerr := q.enableTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing enableTeamStmt: %w", cerr)
		}
	}
	if q.listTeamsStmt != nil {
		if cerr := q.listTeamsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTeamsStmt: %w", cerr)
		}
	}
	if q.readTeamStmt != nil {
		if cerr := q.readTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readTeamStmt: %w", cerr)
		}
	}
	if q.readTeamByOwnerStmt != nil {
		if cerr := q.readTeamByOwnerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readTeamByOwnerStmt: %w", cerr)
		}
	}
	if q.softDeleteTeamStmt != nil {
		if cerr := q.softDeleteTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing softDeleteTeamStmt: %w", cerr)
		}
	}
	if q.unsoftDeleteTeamStmt != nil {
		if cerr := q.unsoftDeleteTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unsoftDeleteTeamStmt: %w", cerr)
		}
	}
	if q.updateTeamStmt != nil {
		if cerr := q.updateTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTeamStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                   DBTX
	tx                   *sql.Tx
	changeTeamOwnerStmt  *sql.Stmt
	createTeamStmt       *sql.Stmt
	deleteTeamStmt       *sql.Stmt
	disableTeamStmt      *sql.Stmt
	enableTeamStmt       *sql.Stmt
	listTeamsStmt        *sql.Stmt
	readTeamStmt         *sql.Stmt
	readTeamByOwnerStmt  *sql.Stmt
	softDeleteTeamStmt   *sql.Stmt
	unsoftDeleteTeamStmt *sql.Stmt
	updateTeamStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                   tx,
		tx:                   tx,
		changeTeamOwnerStmt:  q.changeTeamOwnerStmt,
		createTeamStmt:       q.createTeamStmt,
		deleteTeamStmt:       q.deleteTeamStmt,
		disableTeamStmt:      q.disableTeamStmt,
		enableTeamStmt:       q.enableTeamStmt,
		listTeamsStmt:        q.listTeamsStmt,
		readTeamStmt:         q.readTeamStmt,
		readTeamByOwnerStmt:  q.readTeamByOwnerStmt,
		softDeleteTeamStmt:   q.softDeleteTeamStmt,
		unsoftDeleteTeamStmt: q.unsoftDeleteTeamStmt,
		updateTeamStmt:       q.updateTeamStmt,
	}
}
